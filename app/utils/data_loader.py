# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –∫—É—Ä—å–µ—Ä–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ GeoJSON —Ñ–∞–π–ª–æ–≤ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≥–æ—Ä–æ–¥–æ–≤.
"""
import os
import json
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def load_initial_data():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É data/cities/{city_id}/
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤
        cities_config_path = 'data/cities/cities_config.json'
        
        if not os.path.exists(cities_config_path):
            logger.warning("‚ö†Ô∏è  cities_config.json not found")
            return {'cities_config': False}
        
        logger.info("‚úÖ cities_config.json found")
        
        # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
        with open(cities_config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        cities = [city['id'] for city in config.get('cities', [])]
        files_status = {'cities_config': True}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        for city_id in cities:
            restaurants_file = f'data/cities/{city_id}/restaurants.geojson'
            buildings_file = f'data/cities/{city_id}/buildings.geojson'
            
            if os.path.exists(restaurants_file):
                logger.info(f"‚úÖ {city_id}: restaurants.geojson found")
                files_status[f'{city_id}_restaurants'] = True
            else:
                logger.warning(f"‚ö†Ô∏è  {city_id}: restaurants.geojson not found")
                files_status[f'{city_id}_restaurants'] = False
            
            if os.path.exists(buildings_file):
                logger.info(f"‚úÖ {city_id}: buildings.geojson found")
                files_status[f'{city_id}_buildings'] = True
            else:
                logger.warning(f"‚ö†Ô∏è  {city_id}: buildings.geojson not found")
                files_status[f'{city_id}_buildings'] = False
        
        logger.info("üìä Data files check completed")
        return files_status
        
    except Exception as e:
        logger.error(f"Error checking data files: {str(e)}")
        return {'cities_config': False}
