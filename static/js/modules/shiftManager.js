/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
 */
class ShiftManager {
  constructor(gameState, socketManager) {
    this.gameState = gameState;
    this.socketManager = socketManager;
    this.lastButtonState = null;
    this.zoneCheckInterval = null;

    this.SHIFT_STATES = {
      REQUESTING_GPS: 'requesting_gps',
      START_SHIFT: 'start_shift',
      END_SHIFT: 'end_shift',
      SEARCHING: 'searching',
      TO_PICKUP: 'to_pickup',
      AT_PICKUP: 'at_pickup',
      TO_DROPOFF: 'to_dropoff',
      AT_DROPOFF: 'at_dropoff'
    };
  }

  async handleShiftButtonClick() {
    console.log("–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–º–µ–Ω—ã");

    const button = document.getElementById("startGame");
    const buttonText = button?.querySelector("h3")?.textContent;

    console.log("–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:", buttonText);

    try {
      if (!window.geoManager?.hasStoredPermission() || !window.geoManager?.currentPosition) {
        console.log("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º GPS‚Ä¶");
        this.updateShiftButton('REQUESTING_GPS_ACTIVE');
        try {
          await window.geoManager.requestPermission(true);
          this.updateShiftButton(this.SHIFT_STATES.START_SHIFT);
        } catch (error) {
          console.error("GPS –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω:", error);
          this.updateShiftButton(this.SHIFT_STATES.REQUESTING_GPS);
        }
        return;
      }

      if (!this.gameState.isOnShift) {
        console.log("‚Üí –ù–∞—á–∏–Ω–∞–µ–º —Å–º–µ–Ω—É");
        await this.startShift();
        return;
      }

      if (this.gameState.isSearching) {
        console.log("‚Üí –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫");
        await this.stopSearching();
        return;
      }

      if (this.gameState.currentOrder) {
        if (buttonText === "–ó–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑") {
          console.log("‚Üí –ó–∞–±–∏—Ä–∞–µ–º –∑–∞–∫–∞–∑");
          await this.pickupOrder();
          return;
        }
        if (buttonText === "–î–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑") {
          console.log("‚Üí –î–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑");
          await this.deliverOrder();
          return;
        }
        console.log("‚Üí –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –∑–∞–∫–∞–∑—É");
        this.openNavigation();
        return;
      }

      console.log("‚Üí –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É");
      await this.endShift();

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞:", error);
      
      if (!window.geoManager?.hasStoredPermission() || !window.geoManager?.currentPosition) {
        this.updateShiftButton(this.SHIFT_STATES.REQUESTING_GPS);
      } else if (!this.gameState.isOnShift) {
        this.updateShiftButton(this.SHIFT_STATES.START_SHIFT);
      }
    }
  }

  async startShift() {
    console.log("–ù–∞—á–∏–Ω–∞–µ–º —Å–º–µ–Ω—É");

    if (!window.geoManager?.currentPosition) {
      throw new Error("GPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }

    try {
      const response = await fetch('/api/start_shift', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user_id: this.gameState.userId })
      });

      if (!response.ok) {
        const error = await response.json().catch(() => ({}));
        throw new Error(error.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É');
      }

      this.gameState.setShiftStatus(true);
      console.log("‚úÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞");

      window.geoManager.startTracking((position) => {
        this.sendPositionUpdate(position);
      });

      this.ensureSocketLogin();
      this.startZoneChecking();

      setTimeout(() => this.startSearching(), 500);

    } catch (error) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message);
    }
  }

  async startSearching() {
    console.log("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤");
    
    this.ensureSocketLogin();
    
    this.gameState.setSearchingStatus(true);
    this.updateShiftButton(this.SHIFT_STATES.SEARCHING);
    
    setTimeout(() => {
      this.socketManager.startOrderSearch?.(5);
    }, 100);
  }

  async stopSearching() {
    console.log("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤");
    this.gameState.setSearchingStatus(false);
    this.updateShiftButton(this.SHIFT_STATES.END_SHIFT);
    this.socketManager.stopOrderSearch?.();
  }

  async endShift() {
    console.log("–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–º–µ–Ω—É");

    if (this.gameState.currentOrder) {
      if (!confirm("–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑. –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É?")) {
        return;
      }
    }

    try {
      const response = await fetch('/api/stop_shift', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user_id: this.gameState.userId })
      });

      if (!response.ok) {
        const error = await response.json().catch(() => ({}));
        throw new Error(error.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É');
      }

      this.gameState.setShiftStatus(false);
      this.gameState.setSearchingStatus(false);
      this.gameState.setCurrentOrder(null);

      window.geoManager?.stopTracking();
      this.stopZoneChecking();

      if (window.mapManager) {
        window.mapManager.clearOrderMarkers();
      }

      this.updateShiftButton(this.SHIFT_STATES.START_SHIFT);
      console.log("‚úÖ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

    } catch (error) {
      throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã: ' + error.message);
    }
  }

  async pickupOrder() {
    console.log("–í—ã–ø–æ–ª–Ω—è–µ–º pickup –∑–∞–∫–∞–∑–∞");
    try {
      const response = await fetch('/api/order/pickup', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user_id: this.gameState.userId })
      });

      const result = await response.json();

      if (result.success) {
        console.log("‚úÖ –ó–∞–∫–∞–∑ –∑–∞–±—Ä–∞–Ω:", result);

        const updatedOrder = result.order || {};
        updatedOrder.pickup_time = updatedOrder.pickup_time || Date.now();
        this.gameState.setCurrentOrder(updatedOrder);

        this.updateShiftButton(this.SHIFT_STATES.TO_DROPOFF);

        alertModal.success("–ó–∞–∫–∞–∑ –∑–∞–±—Ä–∞–Ω! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –∫–ª–∏–µ–Ω—Ç—É.");
      } else {
        alertModal.error((result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ pickup:", error);
      alertModal.error("–û—à–∏–±–∫–∞ –∑–∞–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞: " + error.message);
    }
  }

  async deliverOrder() {
  console.log("–í—ã–ø–æ–ª–Ω—è–µ–º delivery –∑–∞–∫–∞–∑–∞");

  try {
    const response = await fetch('/api/order/deliver', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ user_id: this.gameState.userId })
    });

    const result = await response.json();

    if (result.success) {
      console.log("‚úÖ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω:", result);

      const payoutValue =
        typeof result.payout === 'number'
          ? result.payout
          : (result.payout?.total ?? result.payout ?? 0);

      const bonusText =
        result.payout && typeof result.payout === 'object' && result.payout.bonus
          ? ` (+$${Number(result.payout.bonus).toFixed(2)} –±–æ–Ω—É—Å)`
          : '';

      this.gameState.setCurrentOrder(null);
      
      // –°–∫—Ä—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
      if (window.orderStatusBanner) {
        window.orderStatusBanner.hide();
      }
      
      this.stopZoneChecking();

      if (window.mapManager) {
        window.mapManager.clearOrderMarkers();
      }

      alertModal.showBalance(
        payoutValue,
        result.new_balance,
        bonusText
      );

      const balanceEl = document.getElementById('balanceAmount');
      if (balanceEl && typeof result.new_balance === 'number') {
        balanceEl.textContent = result.new_balance.toFixed(2);
      }

      setTimeout(() => this.startSearching(), 1000);

    } else {
      alertModal.error((result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ delivery:", error);
    alertModal.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: " + error.message);
  }
  }

  startZoneChecking() {
    this.stopZoneChecking();
    this.zoneCheckInterval = setInterval(() => this.checkZones(), 2000);
    console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω –∑–∞–ø—É—â–µ–Ω–∞");
  }

  stopZoneChecking() {
    if (this.zoneCheckInterval) {
      clearInterval(this.zoneCheckInterval);
      this.zoneCheckInterval = null;
      console.log("üõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    }
  }

  async checkZones() {
    if (!this.gameState.currentOrder || !window.geoManager?.currentPosition) return;

    const pos = window.geoManager.getCurrentPosition();
    try {
      const response = await fetch('/api/position', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          user_id: this.gameState.userId,
          lat: pos.lat,
          lng: pos.lng,
          accuracy: pos.accuracy
        })
      });

      if (!response.ok) return;

      const result = await response.json();
      const zones = result.zones || {};
      const order = this.gameState.currentOrder;

      if (!order.pickup_time) {
        if (zones.in_pickup_zone && zones.can_pickup) {
          this.updateShiftButton(this.SHIFT_STATES.AT_PICKUP);
        } else {
          this.updateShiftButton(this.SHIFT_STATES.TO_PICKUP);
        }
      } else {
        if (zones.in_dropoff_zone && zones.can_deliver) {
          this.updateShiftButton(this.SHIFT_STATES.AT_DROPOFF);
        } else {
          this.updateShiftButton(this.SHIFT_STATES.TO_DROPOFF);
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–æ–Ω:", error);
    }
  }

  openNavigation() {
    const order = this.gameState.currentOrder;
    if (!order) {
      console.error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏");
      return;
    }

    let target, targetName;
    if (!order.pickup_time) {
      target = order.pickup;
      targetName = order.pickup?.name || '–†–µ—Å—Ç–æ—Ä–∞–Ω';
    } else {
      target = order.dropoff;
      targetName = order.dropoff?.address || '–ö–ª–∏–µ–Ω—Ç';
    }

    if (!target?.lat || !target?.lng) {
      console.error("–£ —Ç–æ—á–∫–∏ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç");
      return;
    }

    const lat = target.lat;
    const lng = target.lng;
    
    console.log("–û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫:", targetName);
    
    const url = window.mapServiceSelector 
      ? window.mapServiceSelector.getNavigationUrl(lat, lng)
      : `https://2gis.kz/almaty?m=${lng},${lat}`;
    
    console.log("URL –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", url);
    
    window.open(url, '_blank');
  }

  ensureSocketLogin() {
    if (this.socketManager && this.gameState.userId) {
      console.log("üîÑ –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ socket");
      this.socketManager.loginUser(this.gameState.userId);
    }
  }

  updateShiftButton(state) {
    const button = document.getElementById("startGame");
    const buttonText = button?.querySelector("h3");
    if (!button || !buttonText) return;

    if (this.lastButtonState !== state) {
      console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ ‚Üí", state);
      this.lastButtonState = state;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ Report
    this.updateReportButton(state);

    switch (state) {
      case this.SHIFT_STATES.REQUESTING_GPS:
        buttonText.textContent = "–†–∞–∑—Ä–µ—à–∏—Ç—å GPS";
        button.style.backgroundColor = "#ff6600";
        button.disabled = false;
        break;

      case 'REQUESTING_GPS_ACTIVE':
        buttonText.textContent = "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º GPS...";
        button.style.backgroundColor = "#ff8800";
        button.disabled = true;
        break;

      case this.SHIFT_STATES.START_SHIFT:
        buttonText.textContent = "–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑";
        button.style.backgroundColor = "#121212";
        button.disabled = false;
        break;

      case this.SHIFT_STATES.END_SHIFT:
        buttonText.textContent = "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É";
        button.style.backgroundColor = "#ff4444";
        button.disabled = false;
        break;

      case this.SHIFT_STATES.SEARCHING:
        buttonText.textContent = "–ò—â–µ–º –∑–∞–∫–∞–∑—ã...";
        button.className = "action_button gr8";
        button.disabled = false;
        break;

      case this.SHIFT_STATES.TO_PICKUP:
        buttonText.textContent = "–ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É";
        button.className = "action_button gr7";
        button.disabled = false;
        break;

      case this.SHIFT_STATES.AT_PICKUP:
        buttonText.textContent = "–ó–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑";
        button.className = "action_button gr8";
        button.disabled = false;
        break;

      case this.SHIFT_STATES.TO_DROPOFF:
        buttonText.textContent = "–ö –∫–ª–∏–µ–Ω—Ç—É";
        button.className = "action_button gr9";
        button.disabled = false;
        break;

      case this.SHIFT_STATES.AT_DROPOFF:
        buttonText.textContent = "–î–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑";
        button.className = "action_button gr8";
        button.disabled = false;
        break;

      case 'UNSUPPORTED':
        buttonText.textContent = "GPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
        button.className = "action_button gr1";
        button.disabled = true;
        break;
    }
  }

  updateReportButton(state) {
    const reportButton = document.getElementById('reportButton');
    if (!reportButton) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Report –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ï–î–ï–¢ (–Ω–µ –≤ –∑–æ–Ω–µ)
    // TO_PICKUP - –µ–¥–µ—Ç –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É, TO_DROPOFF - –µ–¥–µ—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É
    const showReport = state === this.SHIFT_STATES.TO_PICKUP || state === this.SHIFT_STATES.TO_DROPOFF;
    reportButton.style.display = showReport ? 'block' : 'none';
    
    console.log(`Report button: ${showReport ? '–ø–æ–∫–∞–∑–∞–Ω–∞' : '—Å–∫—Ä—ã—Ç–∞'} (state: ${state})`);
  }

  sendPositionUpdate(position) {
    this.socketManager.sendPositionUpdate?.(position);
  }

  onGPSPermissionGranted(position) {
    console.log("GPS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ");
    if (window.mapManager) {
      window.mapManager.setView(position.coords, 16);
      window.mapManager.addUserMarker(position.coords);
    }
    this.updateShiftButton(this.SHIFT_STATES.START_SHIFT);
  }

  onGPSPermissionDenied(error) {
    console.error("GPS –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω:", error);
    this.updateShiftButton(this.SHIFT_STATES.REQUESTING_GPS);
  }

  onPositionUpdate(position) {
    if (window.mapManager) {
      window.mapManager.updateUserMarker(position.coords);
    }
  }
}

window.ShiftManager = ShiftManager;
